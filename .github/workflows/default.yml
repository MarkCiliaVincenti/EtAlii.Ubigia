name: Default workflow

on:
  push:
    branches:
      - master
      - 'release/**'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true   # Stop wasting time caching packages
  DOTNET_CLI_TELEMETRY_OPTOUT: true         # Disable sending usage data to Microsoft
  DOTNET_VERSION: 7.0.100
  DOTNET_VERSION_SHORT: 7.0
  SONAR_SCANNER_VERSION: 5.5.3
  IMAGE_NAME: ubigia/storage
  SOURCE_FOLDER: ./Source
  CONFIGURATION: Release
  SOLUTION_FILE: ./Source/EtAlii.Ubigia.sln
  DEBUG_WORKFLOWS: true
  NUGET_UBIGIA_PACK_FILTER: ./Source/**/EtAlii.Ubigia.*.nupkg
  NUGET_XTECHNOLOGY_PACK_FILTER: ./Source/**/EtAlii.xTechnology.*.nupkg
  ENVIRONMENT_SCRIPT: |
    echo "Preparing GitHub workflow environment variables"
    $variables = @(
      'SOLUTION_FILE',
      'SOURCE_FOLDER',
      'NUGET_UBIGIA_PACK_FILTER',
      'NUGET_XTECHNOLOGY_PACK_FILTER'
    )
    foreach ( $variable in $variable )
    {
      $value = (get-item env:$variable).Value
      $value = ("$value" -replace "/", [IO.Path]::DirectorySeparatorChar)
      (get-item env:$variable).Value = $value
      echo "$variable=$value" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
    }
    echo "Dumping environment variables:"
    dir Env:

jobs:
  preparations:
    runs-on: ubuntu-latest
    steps:
     - name: "Preparing GitHub environment variables"
       shell: pwsh
       run: echo "Preparing GitHub workflow"

  build-on-ubuntu:
    runs-on: ubuntu-latest
    needs: preparations
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Cache Ubuntu build
        id: cache-ubuntu-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Build on Ubuntu
        uses: ./.github/actions/build
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          dotnet_version: ${{ env.DOTNET_VERSION }}

  build-on-windows:
    runs-on: windows-latest
    needs: preparations
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Cache Windows build
        id: cache-windows-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Build on Windows
        uses: ./.github/actions/build
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          dotnet_version: ${{ env.DOTNET_VERSION }}

  tests-on-ubuntu:
    runs-on: ubuntu-latest
    needs: build-on-ubuntu
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Load cached Ubuntu build
        id: load-cached-ubuntu-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Cache Ubuntu tests
        id: cache-ubuntu-tests
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-tests-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Test on Ubuntu
        uses: ./.github/actions/test
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          dotnet_version: ${{ env.DOTNET_VERSION }}
          dotnet_version_short: ${{ env.DOTNET_VERSION_SHORT }}
          test_filter: "FullyQualifiedName!~.Signalr & FullyQualifiedName!~.Rest"

  tests-on-windows:
    runs-on: windows-latest
    needs: build-on-windows
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Load cached Windows build
        id: load-cached-windows-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Cache Windows tests
        id: cache-windows-tests
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-windows-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Test on Windows
        uses: ./.github/actions/test
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          dotnet_version: ${{ env.DOTNET_VERSION }}
          dotnet_version_short: ${{ env.DOTNET_VERSION_SHORT }}
          test_filter: "Transport!~Signalr & Transport!~Rest"

#  sonarcloud-analysis-on-windows:
#    runs-on: windows-latest
#    needs: tests-on-windows
#    steps:
#      - name: "Preparing GitHub environment variables"
#        shell: pwsh
#        run: ${{ env.ENVIRONMENT_SCRIPT }}
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
#      - name: Load cached Windows tests
#        id: load-cached-windows-tests
#        uses: actions/cache@v2
#        with:
#          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
#          key: ${{ runner.os }}-tests-${{ github.run_attempt }}-${{ github.run_number }}
#          restore-keys: ${{ runner.os }}-tests-${{ github.run_attempt }}-${{ github.run_number }}
#      - name: SonarCloud analysis
#        uses: ./.github/actions/analyse-sonarcloud
#        with:
#          configuration: ${{ env.CONFIGURATION }}
#          solution_file: ${{ env.SOLUTION_FILE }}
#          sonar_token: ${{ secrets.SONAR_TOKEN }}
#          github_token: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
#          dotnet_version: ${{ env.DOTNET_VERSION }}
#          sonar_scanner_version: ${{ env.SONAR_SCANNER_VERSION }}

  sonarcloud-analysis-on-ubuntu:
    runs-on: ubuntu-latest
    needs: tests-on-ubuntu
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Load cached Ubuntu tests
        id: load-cached-ubuntu-tests
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-tests-${{ github.run_attempt }}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-tests-${{ github.run_attempt }}-${{ github.run_number }}
      - name: SonarCloud analysis
        uses: ./.github/actions/analyse-sonarcloud
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          dotnet_version: ${{ env.DOTNET_VERSION }}
          sonar_scanner_version: ${{ env.SONAR_SCANNER_VERSION }}

  codeql-analysis:
    runs-on: windows-2019
    needs: build-on-windows
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Load cached Windows build
        id: load-cached-windows-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: CodeQL analysis
        uses: ./.github/actions/analyse-codeql
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          dotnet_version: ${{ env.DOTNET_VERSION }}

  nuget-publish:
    runs-on: ubuntu-latest
    needs: [codeql-analysis, sonarcloud-analysis-on-ubuntu, tests-on-windows]
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Load cached Ubuntu build
        id: load-cached-ubuntu-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Nuget publish
        uses: ./.github/actions/publish-nuget
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          nuget_org_xtechnology_token: ${{ secrets.NUGET_ORG_XTECHNOLOGY_TOKEN }}
          nuget_org_ubigia_token: ${{ secrets.NUGET_ORG_UBIGIA_TOKEN }}
          dotnet_version: ${{ env.DOTNET_VERSION }}
          nuget_ubigia_pack_filter: ${{ env.NUGET_UBIGIA_PACK_FILTER }}
          nuget_xtechnology_pack_filter: ${{ env.NUGET_XTECHNOLOGY_PACK_FILTER }}

  docker-publish:
    runs-on: ubuntu-latest
    needs: [codeql-analysis, sonarcloud-analysis-on-ubuntu, tests-on-windows]
    steps:
      - name: "Preparing GitHub environment variables"
        shell: pwsh
        run: ${{ env.ENVIRONMENT_SCRIPT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis - also needed by NBGV
      - name: Load cached Ubuntu build
        id: load-cached-ubuntu-build
        uses: actions/cache@v2
        with:
          path: ${{ env.SOURCE_FOLDER }} # We'll just cache everything. This is very fast.
          key: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-build-${{ github.run_attempt }}-${{ github.run_number }}
      - name: Docker publish
        uses: ./.github/actions/publish-docker
        with:
          configuration: ${{ env.CONFIGURATION }}
          solution_file: ${{ env.SOLUTION_FILE }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          dockerhub_user: ${{ secrets.DOCKERHUB_USER }}
          dotnet_version: ${{ env.DOTNET_VERSION }}
